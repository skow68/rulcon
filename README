Exceptions
Zbudowana jest dodatkowa warstwa Exceptions. Są to custom Exceptions. W obiektach i funkcjach używany jest try
i w przypadku błędu uruchamiany jest rise naszego custom Exception.
Obsługa custom Exception jest umiejscowiona tylko w kodzie głównym i tutaj generowane są komunikaty dla użytkownika.
Natomiast logi o błędach generowane są w obiektach i funkcjach.

create_rules.py - input list reguł w standarcie regool, nazwa szablonu na fw; tworzy gotowe reguły na fw; brak obsługi AO/AG. 

1. INPUT FORMAT:
nazwa_src;adres_src;nazwa_dst;adres_dst;serwis np.:
bamboo1;172.18.5.8;dst1;192.168.170.71;80
sys1.net.frm.com;pusty;www.net.pub.com;pusty;80 - tworzymy obiekty fqdn
sys1.net.frm.com;172.18.5.8;www.net.pub.com;pusty;80 - wtedy tworzymy obiekt w/g formatu sys1-172.18.5.8 (nie fqdn)
---basetable

2.1 INPUT regool.paths.Connections:
[[src, dst, port], ...]
2.2 OUTPUT regool.paths.Connections:
[['pfe', '172.18.15.129', 'DMZE-OUTSIDE', '192.168.170.71', 'DMZE-INSIDE', 80], ...] - lista list
Czyli input uzupełniony o urządzenia i zony
---fullinfotable

3.1 INPUT regool.rulcon.rule_factory:
[['pfe', '172.18.15.129', 'DMZE-OUTSIDE', '192.168.170.71', 'DMZE-INSIDE', 80], ...]
3.2 OUTPUT regool.rulcon.rule_factory:
{'fw-01': [['inside', 'outside', ['10.143.135.20'], ['172.31.1.72', '172.31.1.73', '172.31.1.74'], ['80'], ''],
 ['inside', 'outside', ['10.143.135.20'], ['172.31.1.74'], '', ['samba']], ...]]}
 ---optitable

4.1 INPUT create_ao.py (testowy; do przeniesienia do paths.py):
{'fw-01': [['inside', 'outside', ['10.3.135.0/24'], ['172.31.1.72', '172.31.1.73', '172.31.1.74', '172.31.1.75', 'sys.int.fmr.com'], ['80'], ...
4.2 OUTPUT create_ao.py:
{'fw-01': [['inside', 'outside', ['net-1-10.3.135.0-24'], ['srv_a-1-172.31.1.72', 'srv_a-2-172.31.1.73', 'srv-3-172.31.1.74', 'master_server-172.31.1.75', 'sys.int.fmr.com'], ['80'], ''],
---optitable_aos
- tworzone są na fw aos

5.1 INPUT create_ag.py (testowy; do przeniesienia do paths.py):
{'fw-01': [['inside', 'outside', ['net-1-10.3.135.0-24'], ['srv_a-1-172.31.1.72', 'srv_a-2-172.31.1.73', 'srv-3-172.31.1.74', 'master_server-172.31.1.75', 'sys.int.fmr.com'], ['80'], ''],
5.2 OUTPUT create_ag:
{'fw-01': [['inside', 'outside', ['net-1-10.3.135.0-24'], ['r77ag-109557-1'], ['tcp-4020'], ''], ...
---optitable_ags
- tworzone są na fw ags

6.1 INPUT create_rules.py (testowy; do przeniesienia do paths.py):
{'fw-01': [['inside', 'outside', ['net-1-10.3.135.0-24'], ['r77ag-109557-1'], ['tcp-4020'], ''], ...
6.2 OUTPUT:
- tu już nie ma tabel
- tworzone są na fw reguły

PORTY SERWISOWE
Porty są obrabiane już w input_data. Porty jako liczby lub zakresy są zamieniane w nazwy serwis obiektów oraz serie pojedynczych
portów kompresowane są w zakresy.  Dzięki temu optymalizacja IP odbywa się już przy obrobionych portach,

OPIS OPTYMALIZACJI REGÓŁ
INPUT (z regool.paths.Connections):
fw-01;bamboo1;172.18.5.8;outside;dst1;192.168.170.71;inside;80
fw-01;bamboo2;172.18.5.9;outside;dst1;192.168.170.71;inside;80
fw-01;bamboo2;172.18.5.9;outside;dst1;192.168.170.71;inside;443
fw-01;bamboo2;172.18.5.10;outside;dst1;192.168.170.71;inside;80
fw-01;bamboo3;172.18.5.10;outside;dst1;192.168.170.71;inside;443
fw-01;bamboo3;172.18.5.10;outside;dst1;192.168.170.71;inside;7000
fw-01;amram1;10.143.135.20;inside;adst1;172.31.1.72;outside;80
fw-01;amram1;10.143.135.20;inside;adst1;172.31.1.73;outside;80
fw-01;amram1;10.143.135.20;inside;adst1;172.31.1.74;outside;80
fw-01;amram1;10.143.135.20;inside;adst1;172.31.1.74;outside;8080

Wiemy, że będą co najmniej 2 reguły, dla trójek:
fw-01;outside;inside oraz fw-01;inside;outside
Na samym początku rozdzielamy dane wejściowe według tego kryterium. W niniejszym przykłądzie mamy dwie takie grupy (set1 i set2)
+--------------------------------+
| ['fw-01', 'outside', 'inside'] |set1
+--------------------------------+
| ['fw-01', 'inside', 'outside'] |set2
+--------------------------------+
###################################################################################
SET 1:

Before OPT:
Te dwie tabele zawierają to samo, ale pierwsza zbudowana jest wg kryterium unikalności dest, a druga gw kryterium unikalności src. Dst jest rozumiany jako dstip:port. Te tabele są danymi wejściowymi dla pierwszej optymalizacji.
+---------------------+---------------------------------------------+
| 192.168.170.71:80   | ['172.18.5.8', '172.18.5.9', '172.18.5.10'] |
+---------------------+---------------------------------------------+
| 192.168.170.71:443  | ['172.18.5.9', '172.18.5.10']               |
+---------------------+---------------------------------------------+
| 192.168.170.71:7000 | ['172.18.5.10']                             |
+---------------------+---------------------------------------------+

+-------------+----------------------------------------------------------------+
| 172.18.5.8  | ['192.168.170.71:80']                                          |
+-------------+----------------------------------------------------------------+
| 172.18.5.9  | ['192.168.170.71:80', '192.168.170.71:443']                    |
+-------------+----------------------------------------------------------------+
| 172.18.5.10 | ['192.168.170.71:80', '192.168.170.71:443',                    |
|             | '192.168.170.71:7000']                                         |
+-------------+----------------------------------------------------------------+

OPT 1:
Opymalizacja bez kompromisowa. Kryterium dla tej optymalizacji jest minimalna liczba reguł. Na tym etapie mamy 3 reguły do wprowadzenia:
+------------------------------+--------------------+
| ['172.18.5.8', '172.18.5.9'] | 192.168.170.71:80  |
+------------------------------+--------------------+
| ['172.18.5.9']               | 192.168.170.71:443 |
+------------------------------+--------------------+

+-------------+----------------------------------------------------------------+
| 172.18.5.10 | ['192.168.170.71:80', '192.168.170.71:443',                    |
|             | '192.168.170.71:7000']                                         |
+-------------+----------------------------------------------------------------+

OPT 2:
Opymalizacja bez kompromisowa. W tym przykładzie zadziała tylko dla pierwszej z powyższych tabel, ale ogólnie dotyczy wszystkich przypadków. Chodzi o scalenie reguł, gdzie src i dst są takie same, a różnią się tylko porty. Na tym etapie mamy 2 reguły do wprowadzenia.
+------------------------------+-----------------------------------------------+
| ['172.18.5.8', '172.18.5.9'] | ['192.168.170.71:80', '192.168.170.71:443']   |
+------------------------------+-----------------------------------------------+
| ['172.18.5.10']              | ['192.168.170.71:80', '192.168.170.71:443',   |
|                              | '192.168.170.71:7000']                        |
+------------------------------+-----------------------------------------------+

OPT 3:
Tutaj mamy już kompromis. Wyłuskanie portów z każdego wiersza i wrzucenie do wspólnego worka. W tym przypadku akurat nie ma kompromisu.
+------------------------------+--------------------+-----------------------+
| ['172.18.5.8', '172.18.5.9'] | ['192.168.170.71'] | ['443', '80']         |
+------------------------------+--------------------+-----------------------+
| ['172.18.5.10']              | ['192.168.170.71'] | ['443', '7000', '80'] |
+------------------------------+--------------------+-----------------------+

Jest tu pole do następnego kompromisu:
- jeśli dst jest ten sam i port set reguły drugiej zawiera port set reguły pierwszej, to można:

+---------------------------------------------+--------------------+-----------------------+
| ['172.18.5.8', '172.18.5.9', '172.18.5.10'] | ['192.168.170.71'] | ['443', '80', '7000'] |
+---------------------------------------------+--------------------+-----------------------+

Ale z tego rodzaju kompromisem jest problem. Co jeśli zamiast 172.18.5.8 i 9 mieli byśmy np. 172.18.128.0/23?
#################################################################################

SET 2:

W tym przypadku interesujący jest tylko OPT 3. Pokazuje kompromis na portach.
OPT 2:
+-------------------+----------------------------------------------------------+
| ['10.143.135.20'] | ['172.31.1.74:80', '172.31.1.73:80', '172.31.1.74:80',   |
|                   | '172.31.1.74:8080']                                      |
+-------------------+----------------------------------------------------------+
OPT 3:
+-------------------+-----------------------------------------+----------------+
| ['10.143.135.20'] | ['172.31.1.73', '172.31.1.72',          | ['8080', '80'] |
|                   | '172.31.1.74']                          |                |
+-------------------+-----------------------------------------+----------------+

Czyli nadmiarowo 10.143.135.20 ma dostęp do poru 8080 na 172.31.1.73 i 74.